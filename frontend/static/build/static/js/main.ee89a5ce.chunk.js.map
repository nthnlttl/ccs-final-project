{"version":3,"sources":["components/Registration/RegistrationForm.js","components/Login/LoginForm.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","useState","username","email","password1","password2","user","setUser","setError","handleInput","event","target","name","value","prevState","handleError","error","console","warn","a","preventDefault","options","method","headers","Cookies","get","body","JSON","stringify","fetch","catch","response","log","json","data","set","key","setIsAuth","history","push","isAuth","to","className","onSubmit","htmlFor","type","id","placeholder","onChange","required","password","App","useHistory","useEffect","checkAuth","ok","isAdmin","is_staff","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee89a5ce.chunk.js","sourcesContent":["import {useState} from 'react';\nimport {withRouter, Redirect} from 'react-router-dom'\nimport Cookies from 'js-cookie'\n\nfunction RegistrationForm(props) {\n    const [user,setUser] = useState({\n        username: '',\n        email: '',\n        password1: '',\n        password2: '',\n    });\n\n    const [error, setError] = useState(null)\n\n    function handleInput(event) {\n        const {name, value} = event.target;\n        setUser(prevState => ({\n            ...prevState,\n            [name]: value,\n        }));\n    }\n\n    function handleError(error) {\n        console.warn(error)\n    };\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        if(user.password1 !== user.password2) {\n            setError('Passwords do not match!')\n        } else {\n            const options = {\n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json',\n                    'X-CSFRToken':Cookies.get('csfrtoken'),\n                },\n                body: JSON.stringify(user)\n            };\n\n            const response = await fetch('/rest-auth/registration/', options).catch(handleError);\n            if(!response) {\n                console.log(response);\n            } else {\n                const data = await response.json();\n                Cookies.set('Authorization', `Token ${data.key}`);\n                props.setIsAuth(true);\n                props.history.push('/');\n            }\n        }\n    }\n\n    if(props.isAuth) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <form className='mt-3 col-6' onSubmit={handleSubmit}>\n            <div className='form-group text-left mb-3'>\n                <label htmlFor='username'>Username</label>\n                <input \n                    type='text'\n                    className='form-control'\n                    id='username'\n                    placeholder='Enter Username'\n                    onChange={handleInput}\n                    required\n                    name='username'\n                    value={user.username}\n                    />\n            </div>\n            <div className='form-group text-left mb-3'>\n                <label htmlFor='email'>Email</label>\n                <input\n                    type='email'\n                    className='form-control'\n                    id='email'\n                    placeholder='Enter Email'\n                    onChange={handleInput}\n                    required\n                    name='email'\n                    value={user.email}\n                    />\n            </div>\n            <div className='form-group text-left mb-3'>\n                <label htmlFor='password1'>Password</label>\n                <input \n                    type='password'\n                    className='form-control'\n                    id='password1'\n                    placeholder='Enter Password'\n                    onChange={handleInput}\n                    required\n                    name='password1'\n                    value={user.password1}\n                    />\n            </div>\n            <div className='form-group text-left mb-3'>\n                <label htmlFor='password2'>Confirm Password</label>\n                <input \n                    type='password'\n                    className='form-control'\n                    id='password2'\n                    placeholder='Enter Password'\n                    onChange={handleInput}\n                    required\n                    name='password2'\n                    value={user.password2}\n                    />\n            </div>\n            <button type='submit' className='btn btn-primary mt-3'>Register</button>\n        </form>\n    )\n}\n\nexport default withRouter(RegistrationForm)","import {useState} from 'react'\nimport {withRouter, Redirect} from 'react-router-dom'\nimport Cookies from 'js-cookie'\n\nfunction LoginForm(props) {\n    const [user, setUser] = useState({\n        username:'',\n        password:'',\n    });\n\n    function handleInput(event) {\n        const {name,value} = event.target;\n        setUser(prevState => ({\n            ...prevState,\n            [name]: value,\n        }));\n    }\n\n    function handleError(error) {\n        console.warn(error);\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type':'application/json',\n                'X-CSRFToken':Cookies.get('csrftoken'),\n            },\n            body: JSON.stringify(user)\n        };\n\n        const response = await fetch('/rest-auth/login/', options).catch(handleError);\n        if(!response) {\n            console.log(response);\n        } else {\n            const data = await response.json();\n            Cookies.set('Authorization', `Token ${data.key}`);\n            props.setUser((prevState) => ({\n                ...prevState,\n                isAuth: true,\n            }))\n            props.history.push('/');\n        }\n    }\n\n    if(props.isAuth) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <form className='mt-3 col-6' onSubmit={handleSubmit}>\n            <div className='form-group text-left mb-3'>\n                <label htmlFor='username'>Username</label>\n                <input\n                    type='text'\n                    className='form-control'\n                    id='username'\n                    placeholder='Enter Username'\n                    onChange={handleInput}\n                    required\n                    name='username'\n                    value={user.username}\n                />\n            </div>\n            <div className='form-group text-left mb-3'>\n                <label htmlFor='password'>Password</label>\n                <input\n                    type='password'\n                    className='form-control'\n                    placeholder='Enter Password'\n                    onChange={handleInput}\n                    required\n                    name='password'\n                    value={user.password}\n                />\n            </div>\n            <button type='submit' className='btn btn-success' id='login-button'>Login</button>\n        </form>\n    )\n}\n\nexport default withRouter(LoginForm)","import {useState, useEffect} from 'react';\nimport {Route, Switch, withRouter, useHistory} from 'react-router-dom';\nimport './App.css';\nimport RegistrationForm from './../Registration/RegistrationForm';\nimport LoginForm from './../Login/LoginForm';\nimport Cookies from 'js-cookie';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n\n  const history = useHistory();\n\nuseEffect(() =>  {\n  const checkAuth = async () => {\n    const response = await fetch('/rest-auth/user/');\n    if(!response.ok) {\n      setUser({isAuth: false});\n    } else {\n      const data = await response.json();\n      setUser({isAuth: true, isAdmin: data.is_staff})\n    }\n  }\n  checkAuth();\n}, [history]);\n\nasync function handleLogout(event, props) {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json',\n      'X-CSRFToken':Cookies.get('csrftoken'),\n    },\n    body: JSON.stringify(props.user),\n  };\n  const response = await fetch('/rest-auth/logout/', options);\n  if (!response) {\n    console.log(response);\n  } else {\n    console.log(response);\n    const data = await response.json();\n    Cookies.remove('Authorization');\n    setUser({isAuth: false});\n    history.push('/login');\n  }\n}\n\nconst isAuth = user?.isAuth;\n\n  return (\n    <>\n    {/* <Header isAuth={isAuth}/> */}\n    <Switch>\n      <Route path='/registration'>\n        <RegistrationForm isAuth={isAuth} setUser={setUser}/>\n      </Route>\n      <Route>\n        <LoginForm isAuth={isAuth} setUser={setUser} />\n      </Route>\n    </Switch>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}